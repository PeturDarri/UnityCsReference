name: Build and Release Unity Version Tag

on:
  #push:
  #  tags:
  #    - '*'  # Trigger for all tag pushes
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build'     
        required: true

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Set TAG_REF based on the trigger
    - name: Set tag reference
      id: set_ref
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "TAG_REF=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
        else
          echo "TAG_REF=${{ github.ref }}" >> $GITHUB_ENV
        fi

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ env.TAG_REF }}

    - name: Restore dependencies
      run: dotnet restore Projects/CSharp/UnityReferenceSource.sln

    - name: Build
      run: dotnet build Projects/CSharp/UnityReferenceSource.sln --no-restore

    - name: Install JetBrains.Refasmer.CliTool
      run: dotnet tool install --global JetBrains.Refasmer.CliTool

    - name: Strip .dlls
      run: |
        refasmer --outputdir=stripped --public --noattr Projects/CSharp/bin/Debug/netstandard2.1/UnityEngine.dll Projects/CSharp/bin/Debug/netstandard2.1/UnityEditor.dll

    - name: Archive stripped .dlls into .tar.gz
      run: tar -czvf release.tar.gz -C stripped UnityEngine.dll UnityEditor.dll

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.TAG_REF }}
        release_name: Release ${{ env.TAG_REF }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # From the step above
        asset_path: ./release.tar.gz
        asset_name: release.tar.gz
        asset_content_type: application/gzip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

